# backendAzureRmKey this variable needs to be updated when you require a new tf state file for resources 
# and refer same tf state file if need to destroy.
name: $(BuildDefinitionName)_$(DayOfMonth).$(Month).$(Year:yyyy)_$(Hours)_$(Minutes)
 
trigger: 
  - main
 
pr: none

pool:
  name: Default

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Destroy'
    values:
    - Plan
    - Apply
    - Destroy
 
variables:
  - name: backendServiceArm
    value: 'terraform-cred'
  - name: backendAzureRmResourceGroupName
    value: 'example-rg'
  - name: backendAzureRmStorageAccountName
    value: 'centralsa'
  - name: backendAzureRmContainerName
    value: 'tfstatecontainer'
  - name: backendAzureRmKey
    value: 'devwinAVDvm.tfstate'
  - name: parallelRun
    value: '15'
  - name: tfver
    value: '1.0.0'
  - name: action
    value: ${{ parameters.Action }}
 
stages :  
  - stage: terraform_plan_apply
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_apply
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
                terraformVersion: '${{ variables.tfver }}'
          - task: TerraformTaskV2@2
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV2@2
            displayName: 'plan'
            condition: and(succeeded(), eq(variables['Action'], 'Plan'))
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV2@2
            displayName: 'apply'
            condition: and(succeeded(), eq(variables['Action'], 'Apply'))
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-parallelism=${{ variables.parallelRun }}'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
 
  - stage: terraform_destroy
    condition: contains('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_destroy
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
                terraformVersion: '${{ variables.tfver }}'
          - task: TerraformTaskV2@2
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/'
          - task: TerraformTaskV2@2
            displayName: 'destroy'
            condition: and(succeeded(), eq(variables['action'], 'Destroy'))
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              commandOptions: '-parallelism=${{ variables.parallelRun }}'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
